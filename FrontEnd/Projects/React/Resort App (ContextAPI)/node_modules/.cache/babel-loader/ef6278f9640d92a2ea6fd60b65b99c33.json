{"ast":null,"code":"var _jsxFileName = \"/home/mrunali/Desktop/resort/src/context.js\";\nimport React, { Component } from \"react\";\nimport items from './data';\nconst RoomContext = React.createContext();\n\nclass RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      loading: true,\n      type: \"all\",\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      breakfast: false,\n      pets: false\n    };\n\n    this.getRoom = slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = target.type === \"checkbox\" ? target.checked : target.value;\n      const name = target.name;\n      console.log(name, value);\n      this.setState({\n        [name]: value\n      }, this.filterRooms);\n    };\n\n    this.filterRooms = () => {\n      let {\n        rooms,\n        type,\n        capacity,\n        price,\n        minSize,\n        maxSize,\n        breakfast,\n        pets\n      } = this.state;\n      let tempRooms = [...rooms]; // transform values\n      // get capacity\n\n      capacity = parseInt(capacity);\n      price = parseInt(price); // filter by type\n\n      if (type !== \"all\") {\n        tempRooms = tempRooms.filter(room => room.type === type);\n      } // filter by capacity\n\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      } // filter by price\n\n\n      tempRooms = tempRooms.filter(room => room.price <= price); //filter by size\n\n      tempRooms = tempRooms.filter(room => room.size >= minSize && room.size <= maxSize); //filter by breakfast\n\n      if (breakfast) {\n        tempRooms = tempRooms.filter(room => room.breakfast === true);\n      } //filter by pets\n\n\n      if (pets) {\n        tempRooms = tempRooms.filter(room => room.pets === true);\n      }\n\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    };\n  }\n\n  componentDidMount() {\n    // this.getData();\n    let rooms = this.formatData(items);\n    let featuredRooms = rooms.filter(room => room.featured === true); //\n\n    let maxPrice = Math.max(...rooms.map(item => item.price));\n    let maxSize = Math.max(...rooms.map(item => item.size));\n    this.setState({\n      rooms,\n      featuredRooms,\n      sortedRooms: rooms,\n      loading: false,\n      price: maxPrice,\n      maxPrice,\n      maxSize\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let room = { ...item.fields,\n        images,\n        id\n      };\n      return room;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(RoomContext.Provider, {\n      value: { ...this.state,\n        getRoom: this.getRoom,\n        handleChange: this.handleChange\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst RoomConsumer = RoomContext.Consumer;\nexport { RoomProvider, RoomConsumer, RoomContext };\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(RoomConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 27\n      }\n    })));\n  };\n}","map":{"version":3,"sources":["/home/mrunali/Desktop/resort/src/context.js"],"names":["React","Component","items","RoomContext","createContext","RoomProvider","state","rooms","sortedRooms","featuredRooms","loading","type","capacity","price","minPrice","maxPrice","minSize","maxSize","breakfast","pets","getRoom","slug","tempRooms","room","find","handleChange","event","target","value","checked","name","console","log","setState","filterRooms","parseInt","filter","size","componentDidMount","formatData","featured","Math","max","map","item","tempItems","id","sys","images","fields","image","file","url","render","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport items from './data';\nconst RoomContext = React.createContext();\n\nclass RoomProvider extends Component {\n    state = {\n        rooms: [],\n        sortedRooms: [],\n        featuredRooms: [],\n        loading: true,\n        type: \"all\",\n        capacity: 1,\n        price: 0,\n        minPrice: 0,\n        maxPrice: 0,\n        minSize: 0,\n        maxSize: 0,\n        breakfast: false,\n        pets: false\n    };\n\n    componentDidMount() {\n        // this.getData();\n        let rooms = this.formatData(items);\n        let featuredRooms = rooms.filter(room => room.featured === true);\n        //\n        let maxPrice = Math.max(...rooms.map(item => item.price));\n        let maxSize = Math.max(...rooms.map(item => item.size));\n        this.setState({\n            rooms,\n            featuredRooms,\n            sortedRooms: rooms,\n            loading: false,\n            price: maxPrice,\n            maxPrice,\n            maxSize\n\n        });\n    }\n    formatData(items) {\n        let tempItems = items.map(item => {\n            let id = item.sys.id;\n            let images = item.fields.images.map(image => image.fields.file.url);\n\n\n            let room = { ...item.fields, images, id };\n            return room;\n        });\n        return tempItems;\n    }\n\n    getRoom = slug => {\n        let tempRooms = [...this.state.rooms];\n        const room = tempRooms.find(room => room.slug === slug);\n        return room;\n    };\n\n    handleChange = event => {\n        const target = event.target;\n        const value = target.type === \"checkbox\" ? target.checked : target.value;\n        const name = target.name;\n        console.log(name, value);\n\n\n        this.setState(\n            {\n                [name]: value\n            },\n            this.filterRooms\n        );\n    };\n\n\n    filterRooms = () => {\n        let {\n            rooms,\n            type,\n            capacity,\n            price,\n            minSize,\n            maxSize,\n            breakfast,\n            pets\n        } = this.state;\n\n        let tempRooms = [...rooms];\n        // transform values\n        // get capacity\n        capacity = parseInt(capacity);\n        price = parseInt(price);\n        // filter by type\n        if (type !== \"all\") {\n            tempRooms = tempRooms.filter(room => room.type === type);\n        }\n        // filter by capacity\n        if (capacity !== 1) {\n            tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n        }\n        // filter by price\n        tempRooms = tempRooms.filter(room => room.price <= price);\n        //filter by size\n        tempRooms = tempRooms.filter(\n            room => room.size >= minSize && room.size <= maxSize\n        );\n        //filter by breakfast\n        if (breakfast) {\n            tempRooms = tempRooms.filter(room => room.breakfast === true);\n        }\n        //filter by pets\n        if (pets) {\n            tempRooms = tempRooms.filter(room => room.pets === true);\n        }\n        this.setState({\n            sortedRooms: tempRooms\n        });\n    };\n\n    render() {\n        return (\n            <RoomContext.Provider\n                value={{\n                    ...this.state,\n                    getRoom: this.getRoom,\n                    handleChange: this.handleChange\n                }}\n            >\n                {this.props.children}\n            </RoomContext.Provider>\n        );\n    }\n}\n\nconst RoomConsumer = RoomContext.Consumer;\n\nexport { RoomProvider, RoomConsumer, RoomContext };\n\nexport function withRoomConsumer(Component) {\n    return function ConsumerWrapper(props) {\n        return (\n            <RoomConsumer>\n                {value => <Component {...props} context={value} />}\n            </RoomConsumer>\n        );\n    };\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}