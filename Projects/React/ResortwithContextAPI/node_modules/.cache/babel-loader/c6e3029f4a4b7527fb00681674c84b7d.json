{"ast":null,"code":"var _jsxFileName = \"/home/mrunali/Desktop/resort/src/context.js\";\nimport React, { Component } from \"react\";\nimport items from './data';\nconst RoomContext = React.createContext();\n\nclass RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      loading: true\n    };\n\n    this.getRoom = slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = target.type === \"checkbox\" ? target.checked : target.value;\n      const name = target.name;\n      console.log(name, value);\n      this.setState({\n        [name]: value\n      }, this.filterRooms);\n    };\n\n    this.filterRooms = () => {\n      let {\n        rooms,\n        type,\n        capacity,\n        price,\n        minSize,\n        maxSize,\n        breakfast,\n        pets\n      } = this.state;\n      let tempRooms = [...rooms]; // transform values\n      // get capacity\n\n      capacity = parseInt(capacity);\n      price = parseInt(price); // filter by type\n\n      if (type !== \"all\") {\n        tempRooms = tempRooms.filter(room => room.type === type);\n      } // filter by capacity\n\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      } // filter by price\n\n\n      tempRooms = tempRooms.filter(room => room.price <= price); //filter by size\n\n      tempRooms = tempRooms.filter(room => room.size >= minSize && room.size <= maxSize); //filter by breakfast\n\n      if (breakfast) {\n        tempRooms = tempRooms.filter(room => room.breakfast === true);\n      } //filter by pets\n\n\n      if (pets) {\n        tempRooms = tempRooms.filter(room => room.pets === true);\n      }\n\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    };\n  }\n\n  componentDidMount() {\n    // this.getData();\n    let rooms = this.formatData(items);\n    let featuredRooms = rooms.filter(room => room.featured === true); //\n\n    let maxPrice = Math.max(...rooms.map(item => item.price));\n    let maxSize = Math.max(...rooms.map(item => item.size));\n    this.setState({\n      rooms,\n      featuredRooms,\n      sortedRooms: rooms,\n      loading: false,\n      //\n      price: maxPrice,\n      maxPrice,\n      maxSize\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let room = { ...item.fields,\n        images,\n        id\n      };\n      return room;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(RoomContext.Provider, {\n      value: { ...this.state,\n        getRoom: this.getRoom,\n        handleChange: this.handleChange\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst RoomConsumer = RoomContext.Consumer;\nexport { RoomProvider, RoomConsumer, RoomContext };","map":{"version":3,"sources":["/home/mrunali/Desktop/resort/src/context.js"],"names":["React","Component","items","RoomContext","createContext","RoomProvider","state","rooms","sortedRooms","featuredRooms","loading","getRoom","slug","tempRooms","room","find","handleChange","event","target","value","type","checked","name","console","log","setState","filterRooms","capacity","price","minSize","maxSize","breakfast","pets","parseInt","filter","size","componentDidMount","formatData","featured","maxPrice","Math","max","map","item","tempItems","id","sys","images","fields","image","file","url","render","props","children","RoomConsumer","Consumer"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport items from './data';\nconst RoomContext = React.createContext();\n\nclass RoomProvider extends Component {\n    state = {\n        rooms: [],\n        sortedRooms: [],\n        featuredRooms: [],\n        loading: true,\n    };\n\n    componentDidMount() {\n        // this.getData();\n        let rooms = this.formatData(items);\n        let featuredRooms = rooms.filter(room => room.featured === true);\n        //\n        let maxPrice = Math.max(...rooms.map(item => item.price));\n        let maxSize = Math.max(...rooms.map(item => item.size));\n        this.setState({\n            rooms,\n            featuredRooms,\n            sortedRooms: rooms,\n            loading: false,\n            //\n            price: maxPrice,\n            maxPrice,\n            maxSize\n        });\n    }\n    formatData(items) {\n        let tempItems = items.map(item => {\n            let id = item.sys.id;\n            let images = item.fields.images.map(image => image.fields.file.url);\n\n            let room = { ...item.fields, images, id };\n            return room;\n        });\n        return tempItems;\n    }\n    getRoom = slug => {\n        let tempRooms = [...this.state.rooms];\n        const room = tempRooms.find(room => room.slug === slug);\n        return room;\n    };\n    handleChange = event => {\n        const target = event.target;\n        const value = target.type === \"checkbox\" ? target.checked : target.value;\n        const name = target.name;\n        console.log(name, value);\n\n        this.setState(\n            {\n                [name]: value\n            },\n            this.filterRooms\n        );\n    };\n    filterRooms = () => {\n        let {\n            rooms,\n            type,\n            capacity,\n            price,\n            minSize,\n            maxSize,\n            breakfast,\n            pets\n        } = this.state;\n\n        let tempRooms = [...rooms];\n        // transform values\n        // get capacity\n        capacity = parseInt(capacity);\n        price = parseInt(price);\n        // filter by type\n        if (type !== \"all\") {\n            tempRooms = tempRooms.filter(room => room.type === type);\n        }\n        // filter by capacity\n        if (capacity !== 1) {\n            tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n        }\n        // filter by price\n        tempRooms = tempRooms.filter(room => room.price <= price);\n        //filter by size\n        tempRooms = tempRooms.filter(\n            room => room.size >= minSize && room.size <= maxSize\n        );\n        //filter by breakfast\n        if (breakfast) {\n            tempRooms = tempRooms.filter(room => room.breakfast === true);\n        }\n        //filter by pets\n        if (pets) {\n            tempRooms = tempRooms.filter(room => room.pets === true);\n        }\n        this.setState({\n            sortedRooms: tempRooms\n        });\n    };\n    render() {\n        return (\n            <RoomContext.Provider\n                value={{\n                    ...this.state,\n                    getRoom: this.getRoom,\n                    handleChange: this.handleChange\n                }}\n            >\n                {this.props.children}\n            </RoomContext.Provider>\n        );\n    }\n}\nconst RoomConsumer = RoomContext.Consumer;\n\nexport { RoomProvider, RoomConsumer, RoomContext };\n\n \n"]},"metadata":{},"sourceType":"module"}